{% set version = "1.26.0" %}
{% set name = "cn.mops" %}
{% set bioc = "3.7" %}

package:
  name: 'bioconductor-{{ name|lower }}'
  version: '{{ version }}'
source:
  url:
    - 'http://bioconductor.org/packages/{{ bioc }}/bioc/src/contrib/{{ name }}_{{ version }}.tar.gz'
    - 'https://bioarchive.galaxyproject.org/{{ name }}_{{ version }}.tar.gz'
    - 'https://depot.galaxyproject.org/software/bioconductor-{{ name }}/bioconductor-{{ name }}_{{ version }}_src_all.tar.gz'
  sha256: b9b0be3df2a0ebe6f77d2bfd6087b8f1fd03dc0327ea5e7066a97e64dca68cf5
build:
  number: 0
  rpaths:
    - lib/R/lib/
    - lib/
requirements:
  host:
    - bioconductor-biobase
    - bioconductor-biocgenerics
    - bioconductor-exomecopy
    - bioconductor-genomeinfodb
    - bioconductor-genomicranges
    - bioconductor-iranges
    - bioconductor-rsamtools
    - bioconductor-s4vectors
    - r-base
  run:
    - bioconductor-biobase
    - bioconductor-biocgenerics
    - bioconductor-exomecopy
    - bioconductor-genomeinfodb
    - bioconductor-genomicranges
    - bioconductor-iranges
    - bioconductor-rsamtools
    - bioconductor-s4vectors
    - r-base
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - make
test:
  commands:
    - '$R -e "library(''{{ name }}'')"'
about:
  home: 'http://bioconductor.org/packages/{{ bioc }}/bioc/html/{{ name }}.html'
  license: 'LGPL (>= 2.0)'
  summary: 'cn.mops (Copy Number estimation by a Mixture Of PoissonS) is a data processing pipeline for copy number variations and aberrations (CNVs and CNAs) from next generation sequencing (NGS) data. The package supplies functions to convert BAM files into read count matrices or genomic ranges objects, which are the input objects for cn.mops. cn.mops models the depths of coverage across samples at each genomic position. Therefore, it does not suffer from read count biases along chromosomes. Using a Bayesian approach, cn.mops decomposes read variations across samples into integer copy numbers and noise by its mixture components and Poisson distributions, respectively. cn.mops guarantees a low FDR because wrong detections are indicated by high noise and filtered out. cn.mops is very fast and written in C++.'

